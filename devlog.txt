pią, 17 sty 2020, 09:08:51 CET

Jak ja się w to wpakowałem ...  Mniejsza o to.  Mam tutaj stary kod.
Już kiedyś próbowałem dodać plugin do Prettiera.  Mam nadzieję, że od
tamtej pory nic się nie zmieniło w samej mechanice pluginów.  Rzucę
okiem na dokumentację zanim cokolwiek zrobię.

Pierwszym krokiem będzie przechwycenie momentu, w którym Prettier
parsuje zawartość pliku na AST.  W tym miejscu będę musiał wychwycić
JSDocki i też je parsować.

pią, 17 sty 2020, 09:49:49 CET

Zapoznałem się z kodem, dokumentacją i teraz już pamiętam w czym tkwił
problem.  Sytuacja jest skomplikowana i moje wnioski mogą mijać się
z prawdą, ale wygląda na to, że nie da się rozszerzyć istniejącego
parsera.  Można tylko napisać nowy co jest idealne kiedy chcemy dodać
wsparcie dla całego innego języka, ale nie w moim przypadku.

Podobna sytuacje z printerem.  Tutaj też chcę tylko zmodyfikować
funkcję wypisującą kod zamiast pisać całej nowej.  Niestety nie widzę
ku temu sposobności.

Rozważam teraz możliwość napisania parsera i printera do samych
JSDocków.  Można by wtedy uruchamiać prettiera dwa razy.  Za pierwszym
razem dla samego kodu JS, za drugim dla JSDocków.

Nie podoba mi się takie podejście.  Przechodzenie przez te same pliki
kilka razy jest niewydajne.

pią, 17 sty 2020, 10:16:38 CET

Postanowione.  Napiszę parser do samych JSDocków.  Przynajmniej będę
miał całą logikę odpowiedzialną za parsowanie i formatowanie.  Sprawy
związane z konstruowaniem dodatku do Prettiera pozostawię na koniec.

Coś czuję, że wystarczające okaże się podanie kilku parserów w kodzie
definiującym język.

pią, 17 sty 2020, 10:56:15 CET

Wygląda na to, że można bez przeszkód używać innego parsera wewnątrz
swojego parsera.  Tak uczyniłem i w efekcie dostaję sparsowany kod JS
z wycielonymi komentarzami.  Mogę teraz przejść przez same komentarze
i dodatkowo je parsować.  Pewnie podobnie będzie dało się zrobić
podczas printowania.

                                * * *

Pobrałem repozytorium JSDocka z zamiarem wykorzystania jego własnego
kodu do pluginu parsera.  Przeglądanie innego projektu poszukując
potrzebnych funkcji zabiera cenny czas.

pią, 17 sty 2020, 11:47:51 CET

Zdaje się, że znalazłem główną funkcję parsującą pliki w kodzie
JSDoc.  Zamierzam ją bezwzględnie wykorzystać.  Pierwsze czego mi
trzeba to funkcji znajdującej JSDocki.

pią, 17 sty 2020, 12:50:13 CET

Niestety JSDoc nie jest napisany jak biblioteka i używanie funkcji
bezpośrednio z jego kodu jest uniemożliwione.  Istnieją różne inne
parsery JSDocków.  Sam swojego nie napiszę w tak krótkim czasie więc
muszę z któregoś skorzystać.

pią, 17 sty 2020, 13:12:37 CET

Eh, nie wiem czy się cieszyć czy smucić.  Zrobiłem to.  Działa.
Praktycznie większość tego co chciałem już jest.  Okazało się, że da
się podejść do problemu w niespotykanie prosty sposób bez pisania
dodatku do Prettiera.  Wystarczyła jedna funkcja, która ma około 16
linii kodu.

Nawet nie mam ochoty zagłębiać się w szczegóły.  Przygotuję kod żeby
dało się go zastosować na naszych projektach i zamykam temat.  Pewnie
zejdzie mi na tym jeszcze dużo czasu.  Jak to zwykle bywa ostatnie 20%
pracy zajmuje najwięcej czasu.

pią, 17 sty 2020, 14:25:57 CET

Dodałem więcej przykładowych JSDocków do testowania parsowania.
Obsłużyłem dodatkowe przypadki i dodałem opcję pozwalającą zmienić
ilość spacji oddzielających poszczególne pola.

pią, 17 sty 2020, 14:32:14 CET

Mam chyba już wszystko co chciałem.  Spodziewam się, że nadal jest coś
o czym zapomniałem.  Najlepszym testem będzie użycie kodu na żywym
organizmie.  Przygotuję kod du użytku publicznego i przystąpię do
wdrażania jej na jeden z naszych projektów co powinno zweryfikować
poprawność parsowania i printowania.

pią, 17 sty 2020, 15:06:04 CET

Dodałem parser do naszego głównego projektu.  Odpaliłem.  Dwa razy
wyskoczyły błędy, ale szybko się z nimi uporałem.  Przeszło przez
wszystkie pliki dość szybko.  Patrzę teraz na diffa.  Niestety są
drobne problemy.  Spodziewałem się tego.

Widzę, że jest problem z @description i kolejnością innych tagów.

pią, 17 sty 2020, 15:42:29 CET

@description może występować w formie tagu i w formie zwykłego
tekstu.  Będę faworyzował wersję z tagiem, ale to akurat mniejszy
problem.  Najważniejsze jest ustalenie kolejności i to na tym się
teraz skupię.

pią, 17 sty 2020, 16:30:56 CET

Jest nieźle.  Pozostało lepsze obsłużenie tagu @example i dodawanie
pustej linii po @description.  Jeszcze z jakiegoś powodu nie działają
ustawienia parsera.  To jest bardzo dziwne.

Mimo wszystko kończę na dzisiaj.  Nie ma sensu siedzieć 24h bo pod
wpływem zmęczenia napiszę kod, który będzie potem do przepisania.
Lepiej na spokojnie w weekend trochę jeszcze popracować.

sob, 18 sty 2020, 06:53:12 CET

Nadszedł czas pisania testów.  Jestem na etapie, w którym dodaję
wsparcie dla różnych specyficznych przypadków i planuję przepisać
część kodu.  Dlatego zanim cokolwiek dotknę chce dodać unit testy.

sob, 18 sty 2020, 07:27:03 CET

Mam pierwsze testy.  Już znalazłem kilka dodatkowych przypadków do
pokrycia.  Będzie tak jak pisałem wczoraj "ostatnie 20% pracy zajmuje
najwięcej czasu".
